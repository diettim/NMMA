From 30d9c7eb0231a53606e44893c3f87c01d294efe9 Mon Sep 17 00:00:00 2001
From: Tsun Ho Pang <tsun-ho.pang@ligo.org>
Date: Sat, 21 Dec 2019 04:02:03 -0800
Subject: [PATCH 1/2] Allow EOS sampling in parallel bilby

---
 src/analysis.py   | 12 ++++++++++--
 src/generation.py | 38 ++++++++++++++++++++++++++++++++++++--
 2 files changed, 46 insertions(+), 4 deletions(-)

diff --git a/src/analysis.py b/src/analysis.py
index 9804d48..702c538 100644
--- a/src/analysis.py
+++ b/src/analysis.py
@@ -36,7 +36,6 @@ def main():
     """ Do nothing function to play nicely with MPI """
     pass
 
-
 def fill_sample(args):
     ii, sample = args
     sample = dict(sample).copy()
@@ -46,7 +45,13 @@ def fill_sample(args):
     # Likelihood needs to have marg params to calcuate correct SNR
     likelihood.parameters.update(marg_params)
     bilby.gw.conversion.compute_snrs(sample, likelihood)
-    sample = conversion.generate_all_bbh_parameters(sample)
+    if likelihood.waveform_generator.parameter_conversion == conversion.convert_to_lal_binary_neutron_star_parameters:
+        sample = conversion.generate_all_bns_parameters(sample)
+    elif likelihood.waveform_generator.parameter_conversion == conversion.convert_to_lal_binary_black_hole_parameters:
+        sample = conversion.generate_all_bbh_parameters(sample)
+    else:
+        sample = conversion.generate_all_bns_parameters_with_eos(sample, base_conversion=likelihood.waveform_generator.parameter_conversion)
+
     return sample
 
 
@@ -463,6 +468,9 @@ if args.binary_neutron_star:
 else:
     priors = bilby.gw.prior.BBHPriorDict.from_json(data_dump["prior_file"])
 
+#make sure the parameter conversion is done correctly
+priors.conversion_function = waveform_generator.parameter_conversion
+
 logger.setLevel(logging.WARNING)
 likelihood = bilby.gw.likelihood.GravitationalWaveTransient(
     ifo_list, waveform_generator, priors=priors,
diff --git a/src/generation.py b/src/generation.py
index 3fa0d3b..1215bc3 100644
--- a/src/generation.py
+++ b/src/generation.py
@@ -8,6 +8,7 @@ import os
 
 import numpy as np
 import bilby
+import bilby.core
 from bilby.gw import conversion
 from bilby_pipe.parser import BilbyArgParser
 from bilby_pipe.utils import convert_string_to_dict
@@ -154,11 +155,22 @@ def get_args():
         default=False,
         help="If true, use a BNS source model function (i.e. with tides)",
     )
+    parser.add(
+        "--path-to-eos-data",
+        default=None,
+        type=str,
+        help="Path to eos data"
+    )
+    parser.add(
+        "--ns-mass",
+        default=None,
+        type=float,
+        help="Minimum TOV mass"
+    )
     args = parser.parse_args()
 
     return args
 
-
 def main():
     args = get_args()
     trigger_time = args.trigger_time
@@ -166,10 +178,32 @@ def main():
     label = args.label
     outdir = args.outdir
 
-    if args.binary_neutron_star or "tidal" in args.waveform_approximant.lower():
+    if (args.binary_neutron_star or "tidal" in args.waveform_approximant.lower()) and args.path_to_eos_data is None:
         conv = conversion.convert_to_lal_binary_neutron_star_parameters
         fdsm = bilby.gw.source.lal_binary_neutron_star
         priors = bilby.gw.prior.BNSPriorDict(args.prior_file)
+    elif args.path_to_eos_data is not None and args.ns_mass is not None:
+        print("Running with EOS tables in {0} and a minimum TOV mass of {1} soloar masses\n".format(args.path_to_eos_data, args.ns_mass))
+        #define the custom-made parameter conversion function here
+        function_class = conversion.eos_convert_function(path2data=args.path_to_eos_data, nsMass=args.ns_mass)
+        conv = function_class.convert_to_lal_binary_neutron_star_parameters_with_eos
+        #the freq domain source model is the same
+        fdsm = bilby.gw.source.lal_binary_neutron_star
+        #setup the prior for EOS sampling
+        priors = bilby.gw.prior.BNSPriorDict(args.prior_file)
+        if 'lambda_tilde' in priors.keys():
+            priors.pop('lambda_tilde')
+        if 'delta_lambda_tilde' in priors.keys():
+            priors.pop('delta_lambda_tilde')
+        if not isinstance(priors['lambda_1'], bilby.core.prior.Constraint):
+            print("Prior on lambda1 is not a constraint, changing it to a default constraint.\n")
+            priors['lambda_1'] = bilby.core.prior.Constraint(name='lambda_1', minimum=0., maximum=np.inf)
+        if not isinstance(priors['lambda_2'], bilby.core.prior.Constraint):
+            print("Prior on lambda2 is not a constraint, changing it to a default constraint.\n")
+            priors['lambda_2'] = bilby.core.prior.Constraint(name='lambda_2', minimum=0., maximum=np.inf)
+        if 'EOS' not in priors.keys():
+            print("Did not setup prior for EOS, using all the EOSs in the EOS data path\n")
+            priors['EOS'] = bilby.core.prior.Uniform(name='EOS', minimum=0, maximum=2000., boundary=None)
     else:
         conv = conversion.convert_to_lal_binary_black_hole_parameters
         fdsm = bilby.gw.source.lal_binary_black_hole
-- 
2.22.0

