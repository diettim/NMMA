From 1e6a10765d03761845d54670fa500a8ed06f7ca1 Mon Sep 17 00:00:00 2001
From: Tsun Ho Pang <tsun-ho.pang@ligo.org>
Date: Sat, 21 Dec 2019 03:59:51 -0800
Subject: [PATCH 1/2] Adding conversion functions for EOS sampling

---
 bilby/gw/conversion.py | 45 +++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 44 insertions(+), 1 deletion(-)

diff --git a/bilby/gw/conversion.py b/bilby/gw/conversion.py
index 31eef6ee..3f19d312 100644
--- a/bilby/gw/conversion.py
+++ b/bilby/gw/conversion.py
@@ -4,6 +4,7 @@ import sys
 from tqdm import tqdm
 import numpy as np
 from pandas import DataFrame
+import scipy.interpolate
 
 from ..core.likelihood import MarginalizedLikelihoodReconstructionError
 from ..core.utils import logger, solar_mass
@@ -317,6 +318,49 @@ def convert_to_lal_binary_neutron_star_parameters(parameters):
 
     return converted_parameters, added_keys
 
+class eos_convert_function():
+    def __init__(self, path2data, nsMass):
+        self.path2data=path2data
+        self.nsMass=nsMass
+
+    def convert_to_lal_binary_neutron_star_parameters_with_eos(self, parameters):
+
+        converted_parameters = parameters.copy()
+        original_keys = list(converted_parameters.keys())
+        converted_parameters, added_keys =\
+            convert_to_lal_binary_black_hole_parameters(converted_parameters)
+
+        converted_parameters['redshift'] = luminosity_distance_to_redshift(converted_parameters['luminosity_distance'])
+        mass_1_source = converted_parameters['mass_1']/(1. + converted_parameters['redshift'])
+        mass_2_source = converted_parameters['mass_2']/(1. + converted_parameters['redshift'])
+
+        EOSidx = int(parameters['EOS']) + 1
+        m, Lambda = np.loadtxt('{0}/{1}.dat'.format(self.path2data, EOSidx), unpack=True, usecols=[1,2])
+
+        if m[-1] < self.nsMass or mass_1_source < m[0] or mass_1_source > m[-1] or mass_2_source < m[0] or mass_2_source > m[-1]:
+            lambda1 = -1.
+            lambda2 = -1.
+
+        else:
+            LambdaM = scipy.interpolate.interp1d(m, Lambda, kind='linear')
+            lambda1 = LambdaM(mass_1_source)
+            lambda2 = LambdaM(mass_2_source)
+
+        converted_parameters['lambda_1'] = lambda1
+        converted_parameters['lambda_2'] = lambda2
+        added_keys = added_keys + ['lambda_1', 'lambda_2']
+        return converted_parameters, added_keys
+
+def generate_all_bns_parameters_with_eos(sample, base_conversion=None, likelihood=None, priors=None):
+    waveform_defaults = {
+    'reference_frequency': 50.0, 'waveform_approximant': 'TaylorF2',
+    'minimum_frequency': 20.0}
+    output_sample = _generate_all_cbc_parameters(
+    sample, defaults=waveform_defaults,
+    base_conversion=base_conversion,
+    likelihood=likelihood, priors=priors)
+    output_sample = generate_tidal_parameters(output_sample)
+    return output_sample
 
 def total_mass_and_mass_ratio_to_component_masses(mass_ratio, total_mass):
     """
@@ -792,7 +836,6 @@ def generate_all_bns_parameters(sample, likelihood=None, priors=None):
             "Generation of tidal parameters failed with message {}".format(e))
     return output_sample
 
-
 def generate_specific_parameters(sample, parameters):
     updated_sample = generate_all_bns_parameters(sample=sample.copy())
     output_sample = sample.__class__()
-- 
2.22.0

